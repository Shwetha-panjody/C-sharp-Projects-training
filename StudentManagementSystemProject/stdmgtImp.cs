using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace StudentManagementSystemProject
{
    internal class StudentManagementSystemImplimentation : StudentManagementSystem
    {

        Dictionary<string, Student> StudentData = new Dictionary<string, Student>();

        public void addStudent()
        {
            Console.WriteLine("Enter Student name");
            String name = Console.ReadLine()+"";

            int cl = studentClassNo();
            
            Console.WriteLine("Enter Student mark in Science");
            double mark1 = within100();
            mark1 = Math.Round(mark1, 2);

            Console.WriteLine("Enter Student mark in Math");
            double mark2 = within100();
            mark2 = Math.Round(mark2, 2);

            Console.WriteLine("Enter Student mark in Computer Skill");
            double mark3 = within100();
            mark3 = Math.Round(mark3, 2);

            Student s1 = new Student(name, cl, mark1, mark2, mark3);

            StudentData.Add(s1.Id, s1);
            Console.WriteLine("Student data added successfully!! remember newly autogenerated ROLL NO {0}",s1.Id);
            Console.WriteLine("-----------------------------------------------------------------------------");
        }

        public double within100()
        {
            bool f = true;
            double r = 0.0;
            while (f)
            {
                r = Convert.ToDouble(Console.ReadLine());
                if(r >= 1 && r <= 100)
                {
                    f= false;
                }
                else
                {
                    Console.WriteLine("enter marks within 0 to 100");
                }
            }
            return r;
        }
        public int studentClassNo()
        {
            int cl = 0;
            bool f = true;
            while (f)
            {
                Console.WriteLine("Select Student class\n----------------------");
                Console.WriteLine("1.First std(1st)\n2.Second std(2nd)\n3.Third std(3rd)\n4.Fourth std(4th)\n5.Fifth std(5th)");
                Console.WriteLine("6.First std(6th)\n7.Second std(7th)");
                cl = Convert.ToSByte(Console.ReadLine());

                switch (cl)
                {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        f = false;
                        break;

                    default:
                        Console.WriteLine("Select data from given option only");
                        break;
                }
            }
            return cl;

        }
        public void deleteStudent()
        {
            Console.WriteLine("Enter Student ID which want to Delete");
            String id = Console.ReadLine() + "".ToUpper();

            if (StudentData.ContainsKey(id))  //data exist
            {
                StudentData.Remove(id);
                Console.WriteLine("Student {0} removed from DB successfully",id);
            }
            else
            {
                Console.WriteLine("There is No Student who has id - {0}, please check the ID",id);
            }
            Console.WriteLine("-----------------------------------------------------------------------------");

        }

        public void SearchStudent()
        {
            Console.WriteLine("Enter Student ID which want to Search");
            String id = Console.ReadLine() + "".ToUpper();

            if (StudentData.ContainsKey(id))
            {
                Console.WriteLine("ID\t\tNAME\t\tCLASS\t\tSCIENCE\t\tMATHS\t\tCOMPUTER SKILL");
                Console.WriteLine(StudentData[id]);
            }
            else
            {
                Console.WriteLine("There is No Student with roll no {0}",id);
            }
            Console.WriteLine("-----------------------------------------------------------------------------");

        }

        public void showAllStudent()
        {
            if (StudentData.Count != 0)
            {
                Console.WriteLine("ID\t\t\tNAME\t\tCLASS\t\tSCIENCE\t\tMATHS\t\tCOMPUTER SKILL");

                //sorting key of dictionary
                foreach (KeyValuePair<string, Student> data in StudentData.OrderBy(key => key.Key))
                {
                    Console.WriteLine(data.Value);
                }
            }
            else
            {
                Console.WriteLine("There is No Student Data avaliable currently");
            }
            Console.WriteLine("-----------------------------------------------------------------------------");

        }

        public void TotalNAvg()
        {
            if (StudentData.Count != 0)
            {
                Console.WriteLine("ID\t\tNAME\t\tCLASS\t\tSCIENCE\t\tMATHS\t\tCOMPUTER SKILL\t\tTOTAL\t\tAVERAGE");
                foreach (KeyValuePair<string, Student> data in StudentData)
                {
                    double total = data.Value.Mark1 + data.Value.Mark2 + data.Value.Mark3;
                    Console.WriteLine(data.Value+ "\t\t" + total + "\t\t" + Math.Round(total/3));
                }
            }
            else
            {
                Console.WriteLine("There is No Student Data avaliable currently");
            }
            Console.WriteLine("-----------------------------------------------------------------------------");

        }

        public void TotalStudentInEGDB()
        {
            Console.WriteLine("Total Students in EGDK DataBase is {0}",StudentData.Count);
            Console.WriteLine("-----------------------------------------------------------------------------");

        }

        public void UpdateStudent()
        {
            Console.WriteLine("Enter Student ID whom you want to edit data");
            String id = Console.ReadLine() + "".ToUpper();
            if (!StudentData.ContainsKey(id))  //data exist
            {
                Console.WriteLine("There is No Student with roll no {0}",id);
            }
            else
            {
                Console.WriteLine("choose what kind of data want to change ?\n---------------------");
                Console.WriteLine("1.Name\n2.Class\n3.Science score\n4.Math score\n5.Computer Skill score\n---------------------");
                int data = Convert.ToInt32(Console.ReadLine());
                Student s1=StudentData[id];
                switch (data)
                {
                    case 1:
                        Console.WriteLine("Enter new Name");
                        string name = Console.ReadLine()+"";
                        Console.WriteLine("Name {0} is changed to {1}",s1.Name, name);
                        s1.Name = name;
                        break;

                    case 2:
                        int cl = studentClassNo();  //new class
                        Console.WriteLine("Class {0} is changed to {1}", s1.Clas, cl);

                      //  int oldcl = s1.Clas;  //old class
                     //   Student.classlistarr[s1.Clas - 1] = --Student.classlistarr[s1.Clas - 1];

                        s1.Clas = cl;
                        //while changing class, new regno will get generated based on new class
                        int reg = (++Student.classlistarr[cl - 1]);
                        string newid = "EGDK" + cl;                     
                        s1.Id = newid + reg;
                        Console.WriteLine("new reg no "+ s1.Id);

                        StudentData.Add(s1.Id,s1);          //adding new updated obj and key  
                        StudentData.Remove(id);             //removing existing key and its value

                        break;

                    case 3:
                        Console.WriteLine("Enter new Scienece score");
                        double m1 = within100();
                        m1 = Math.Round(m1, 2);
                        Console.WriteLine("Scienece score {0} is changed to {1}", s1.Mark1, m1);
                        s1.Mark1 = m1;
                        break;

                    case 4:
                        Console.WriteLine("Enter new Maths score");
                        double m2 = within100();
                        m2 = Math.Round(m2, 2);
                        Console.WriteLine("Maths score {0} is changed to {1}", s1.Mark2, m2);
                        s1.Mark2 = m2;
                        break;

                    case 5:
                        Console.WriteLine("Enter new Computer Skill score");
                        double m3 = within100();
                        m3 = Math.Round(m3, 2);
                        Console.WriteLine("Computer Skill score {0} is changed to {1}", s1.Mark3, m3);
                        s1.Mark3 = m3;
                        break;

                    default: Console.WriteLine("Invalied option");
                        break;
                }
            }
            Console.WriteLine("-----------------------------------------------------------------------------");

        }
    }
}
